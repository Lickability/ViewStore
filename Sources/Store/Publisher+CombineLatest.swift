//
//  Publisher+CombineLatest.swift
//  ViewStore
//
//  Created by Twig on 1/13/22.
//

import Combine

/// Adds extensions to `Publisher` to allow a "variadic" number of a publishers to be combined in a single `combineLatest` call.
public extension Publisher {
    func combineLatest<P, Q, R, Y>(
        _ publisher1: P,
        _ publisher2: Q,
        _ publisher3: R,
        _ publisher4: Y) ->
    AnyPublisher<(Self.Output, P.Output, Q.Output, R.Output, Y.Output), Self.Failure> where
P: Publisher,
Q: Publisher,
R: Publisher,
Y: Publisher,
    Self.Failure == P.Failure,
    P.Failure == Q.Failure,
    Q.Failure == R.Failure,
    R.Failure == Y.Failure {
        Publishers.CombineLatest(combineLatest(publisher1, publisher2, publisher3), publisher4).map { tuple, publisher4Value in
            (tuple.0, tuple.1, tuple.2, tuple.3, publisher4Value)
        }.eraseToAnyPublisher()
    }
    
    func combineLatest<P, Q, R, Y, X>(
        _ publisher1: P,
        _ publisher2: Q,
        _ publisher3: R,
        _ publisher4: Y,
        _ publisher5: X) ->
    AnyPublisher<(Self.Output, P.Output, Q.Output, R.Output, Y.Output, X.Output), Self.Failure> where
P: Publisher,
Q: Publisher,
R: Publisher,
Y: Publisher,
X: Publisher,
    Self.Failure == P.Failure,
    P.Failure == Q.Failure,
    Q.Failure == R.Failure,
    R.Failure == Y.Failure,
    Y.Failure == X.Failure {
        Publishers.CombineLatest(combineLatest(publisher1, publisher2, publisher3, publisher4), publisher5).map { tuple, value in
            (tuple.0, tuple.1, tuple.2, tuple.3, tuple.4, value)
        }.eraseToAnyPublisher()
    }
    
    func combineLatest<P, Q, R, Y, X, Z>(
        _ publisher1: P,
        _ publisher2: Q,
        _ publisher3: R,
        _ publisher4: Y,
        _ publisher5: X,
        _ publisher6: Z) ->
    AnyPublisher<(Self.Output, P.Output, Q.Output, R.Output, Y.Output, X.Output, Z.Output), Self.Failure> where
P: Publisher,
Q: Publisher,
R: Publisher,
Y: Publisher,
X: Publisher,
Z: Publisher,
    Self.Failure == P.Failure,
    P.Failure == Q.Failure,
    Q.Failure == R.Failure,
    R.Failure == Y.Failure,
    Y.Failure == X.Failure,
    X.Failure == Z.Failure {
        Publishers.CombineLatest(combineLatest(publisher1, publisher2, publisher3, publisher4, publisher5), publisher6).map { tuple, value in
            (tuple.0, tuple.1, tuple.2, tuple.3, tuple.4, tuple.5, value)
        }.eraseToAnyPublisher()
    }
    
    func combineLatest<P, Q, R, Y, X, Z, A>(
        _ publisher1: P,
        _ publisher2: Q,
        _ publisher3: R,
        _ publisher4: Y,
        _ publisher5: X,
        _ publisher6: Z,
        _ publisher7: A) ->
    AnyPublisher<(Self.Output, P.Output, Q.Output, R.Output, Y.Output, X.Output, Z.Output, A.Output), Self.Failure> where
P: Publisher,
Q: Publisher,
R: Publisher,
Y: Publisher,
X: Publisher,
Z: Publisher,
A: Publisher,
    Self.Failure == P.Failure,
    P.Failure == Q.Failure,
    Q.Failure == R.Failure,
    R.Failure == Y.Failure,
    Y.Failure == X.Failure,
    X.Failure == Z.Failure,
    Z.Failure == A.Failure {
        Publishers.CombineLatest(combineLatest(publisher1, publisher2, publisher3, publisher4, publisher5, publisher6), publisher7).map { tuple, value in
            (tuple.0, tuple.1, tuple.2, tuple.3, tuple.4, tuple.5, tuple.6, value)
        }.eraseToAnyPublisher()
    }
    
    func combineLatest<P, Q, R, Y, X, Z, A, B>(
        _ publisher1: P,
        _ publisher2: Q,
        _ publisher3: R,
        _ publisher4: Y,
        _ publisher5: X,
        _ publisher6: Z,
        _ publisher7: A,
        _ publisher8: B) ->
    AnyPublisher<(Self.Output, P.Output, Q.Output, R.Output, Y.Output, X.Output, Z.Output, A.Output, B.Output), Self.Failure> where
P: Publisher,
Q: Publisher,
R: Publisher,
Y: Publisher,
X: Publisher,
Z: Publisher,
A: Publisher,
B: Publisher,
    Self.Failure == P.Failure,
    P.Failure == Q.Failure,
    Q.Failure == R.Failure,
    R.Failure == Y.Failure,
    Y.Failure == X.Failure,
    X.Failure == Z.Failure,
    Z.Failure == A.Failure,
    A.Failure == B.Failure {
        Publishers.CombineLatest(combineLatest(publisher1, publisher2, publisher3, publisher4, publisher5, publisher6, publisher7), publisher8).map { tuple, value in
            (tuple.0, tuple.1, tuple.2, tuple.3, tuple.4, tuple.5, tuple.6, tuple.7, value)
        }.eraseToAnyPublisher()
    }
    
    func combineLatest<P, Q, R, Y, X, Z, A, B, C>(
        _ publisher1: P,
        _ publisher2: Q,
        _ publisher3: R,
        _ publisher4: Y,
        _ publisher5: X,
        _ publisher6: Z,
        _ publisher7: A,
        _ publisher8: B,
        _ publisher9: C) ->
    AnyPublisher<(Self.Output, P.Output, Q.Output, R.Output, Y.Output, X.Output, Z.Output, A.Output, B.Output, C.Output), Self.Failure> where
P: Publisher,
Q: Publisher,
R: Publisher,
Y: Publisher,
X: Publisher,
Z: Publisher,
A: Publisher,
B: Publisher,
C: Publisher,
    Self.Failure == P.Failure,
    P.Failure == Q.Failure,
    Q.Failure == R.Failure,
    R.Failure == Y.Failure,
    Y.Failure == X.Failure,
    X.Failure == Z.Failure,
    Z.Failure == A.Failure,
    A.Failure == B.Failure,
    B.Failure == C.Failure {
        Publishers.CombineLatest(combineLatest(publisher1, publisher2, publisher3, publisher4, publisher5, publisher6, publisher7, publisher8), publisher9).map { tuple, value in
            (tuple.0, tuple.1, tuple.2, tuple.3, tuple.4, tuple.5, tuple.6, tuple.7, tuple.8, value)
        }.eraseToAnyPublisher()
    }
    
    func combineLatest<P, Q, R, Y, X, Z, A, B, C, D>(
        _ publisher1: P,
        _ publisher2: Q,
        _ publisher3: R,
        _ publisher4: Y,
        _ publisher5: X,
        _ publisher6: Z,
        _ publisher7: A,
        _ publisher8: B,
        _ publisher9: C,
        _ publisher10: D) ->
    AnyPublisher<(Self.Output, P.Output, Q.Output, R.Output, Y.Output, X.Output, Z.Output, A.Output, B.Output, C.Output, D.Output), Self.Failure> where
P: Publisher,
Q: Publisher,
R: Publisher,
Y: Publisher,
X: Publisher,
Z: Publisher,
A: Publisher,
B: Publisher,
C: Publisher,
D: Publisher,
    Self.Failure == P.Failure,
    P.Failure == Q.Failure,
    Q.Failure == R.Failure,
    R.Failure == Y.Failure,
    Y.Failure == X.Failure,
    X.Failure == Z.Failure,
    Z.Failure == A.Failure,
    A.Failure == B.Failure,
    B.Failure == C.Failure,
    C.Failure == D.Failure {
        Publishers.CombineLatest(combineLatest(publisher1, publisher2, publisher3, publisher4, publisher5, publisher6, publisher7, publisher8, publisher9), publisher10).map { tuple, value in
            (tuple.0, tuple.1, tuple.2, tuple.3, tuple.4, tuple.5, tuple.6, tuple.7, tuple.8, tuple.9, value)
        }.eraseToAnyPublisher()
    }
    
    func combineLatest<P, Q, R, Y, X, Z, A, B, C, D, E>(
        _ publisher1: P,
        _ publisher2: Q,
        _ publisher3: R,
        _ publisher4: Y,
        _ publisher5: X,
        _ publisher6: Z,
        _ publisher7: A,
        _ publisher8: B,
        _ publisher9: C,
        _ publisher10: D,
        _ publisher11: E) ->
    AnyPublisher<(Self.Output, P.Output, Q.Output, R.Output, Y.Output, X.Output, Z.Output, A.Output, B.Output, C.Output, D.Output, E.Output), Self.Failure> where
P: Publisher,
Q: Publisher,
R: Publisher,
Y: Publisher,
X: Publisher,
Z: Publisher,
A: Publisher,
B: Publisher,
C: Publisher,
D: Publisher,
E: Publisher,
    Self.Failure == P.Failure,
    P.Failure == Q.Failure,
    Q.Failure == R.Failure,
    R.Failure == Y.Failure,
    Y.Failure == X.Failure,
    X.Failure == Z.Failure,
    Z.Failure == A.Failure,
    A.Failure == B.Failure,
    B.Failure == C.Failure,
    C.Failure == D.Failure,
    D.Failure == E.Failure {
        Publishers.CombineLatest(combineLatest(publisher1, publisher2, publisher3, publisher4, publisher5, publisher6, publisher7, publisher8, publisher9, publisher10), publisher11).map { tuple, value in
            (tuple.0, tuple.1, tuple.2, tuple.3, tuple.4, tuple.5, tuple.6, tuple.7, tuple.8, tuple.9, tuple.10, value)
        }.eraseToAnyPublisher()
    }
    
    func combineLatest<P, Q, R, Y, X, Z, A, B, C, D, E, F>(
        _ publisher1: P,
        _ publisher2: Q,
        _ publisher3: R,
        _ publisher4: Y,
        _ publisher5: X,
        _ publisher6: Z,
        _ publisher7: A,
        _ publisher8: B,
        _ publisher9: C,
        _ publisher10: D,
        _ publisher11: E,
        _ publisher12: F) ->
    AnyPublisher<(Self.Output, P.Output, Q.Output, R.Output, Y.Output, X.Output, Z.Output, A.Output, B.Output, C.Output, D.Output, E.Output, F.Output), Self.Failure> where
P: Publisher,
Q: Publisher,
R: Publisher,
Y: Publisher,
X: Publisher,
Z: Publisher,
A: Publisher,
B: Publisher,
C: Publisher,
D: Publisher,
E: Publisher,
F: Publisher,
    Self.Failure == P.Failure,
    P.Failure == Q.Failure,
    Q.Failure == R.Failure,
    R.Failure == Y.Failure,
    Y.Failure == X.Failure,
    X.Failure == Z.Failure,
    Z.Failure == A.Failure,
    A.Failure == B.Failure,
    B.Failure == C.Failure,
    C.Failure == D.Failure,
    D.Failure == E.Failure,
    E.Failure == F.Failure {
        Publishers.CombineLatest(combineLatest(publisher1, publisher2, publisher3, publisher4, publisher5, publisher6, publisher7, publisher8, publisher9, publisher10, publisher11), publisher12).map { tuple, value in
            (tuple.0, tuple.1, tuple.2, tuple.3, tuple.4, tuple.5, tuple.6, tuple.7, tuple.8, tuple.9, tuple.10, tuple.11, value)
        }.eraseToAnyPublisher()
    }
    
    func combineLatest<P, Q, R, Y, X, Z, A, B, C, D, E, F, G>(
        _ publisher1: P,
        _ publisher2: Q,
        _ publisher3: R,
        _ publisher4: Y,
        _ publisher5: X,
        _ publisher6: Z,
        _ publisher7: A,
        _ publisher8: B,
        _ publisher9: C,
        _ publisher10: D,
        _ publisher11: E,
        _ publisher12: F,
        _ publisher13: G) ->
    AnyPublisher<(Self.Output, P.Output, Q.Output, R.Output, Y.Output, X.Output, Z.Output, A.Output, B.Output, C.Output, D.Output, E.Output, F.Output, G.Output), Self.Failure> where
P: Publisher,
Q: Publisher,
R: Publisher,
Y: Publisher,
X: Publisher,
Z: Publisher,
A: Publisher,
B: Publisher,
C: Publisher,
D: Publisher,
E: Publisher,
F: Publisher,
G: Publisher,
    Self.Failure == P.Failure,
    P.Failure == Q.Failure,
    Q.Failure == R.Failure,
    R.Failure == Y.Failure,
    Y.Failure == X.Failure,
    X.Failure == Z.Failure,
    Z.Failure == A.Failure,
    A.Failure == B.Failure,
    B.Failure == C.Failure,
    C.Failure == D.Failure,
    D.Failure == E.Failure,
    E.Failure == F.Failure,
    F.Failure == G.Failure {
        Publishers.CombineLatest(combineLatest(publisher1, publisher2, publisher3, publisher4, publisher5, publisher6, publisher7, publisher8, publisher9, publisher10, publisher11, publisher12), publisher13).map { tuple, value in
            (tuple.0, tuple.1, tuple.2, tuple.3, tuple.4, tuple.5, tuple.6, tuple.7, tuple.8, tuple.9, tuple.10, tuple.11, tuple.12, value)
        }.eraseToAnyPublisher()
    }
    
    func combineLatest<P, Q, R, Y, X, Z, A, B, C, D, E, F, G, H>(
        _ publisher1: P,
        _ publisher2: Q,
        _ publisher3: R,
        _ publisher4: Y,
        _ publisher5: X,
        _ publisher6: Z,
        _ publisher7: A,
        _ publisher8: B,
        _ publisher9: C,
        _ publisher10: D,
        _ publisher11: E,
        _ publisher12: F,
        _ publisher13: G,
        _ publisher14: H) ->
    AnyPublisher<(Self.Output, P.Output, Q.Output, R.Output, Y.Output, X.Output, Z.Output, A.Output, B.Output, C.Output, D.Output, E.Output, F.Output, G.Output, H.Output), Self.Failure> where
P: Publisher,
Q: Publisher,
R: Publisher,
Y: Publisher,
X: Publisher,
Z: Publisher,
A: Publisher,
B: Publisher,
C: Publisher,
D: Publisher,
E: Publisher,
F: Publisher,
G: Publisher,
H: Publisher,
    Self.Failure == P.Failure,
    P.Failure == Q.Failure,
    Q.Failure == R.Failure,
    R.Failure == Y.Failure,
    Y.Failure == X.Failure,
    X.Failure == Z.Failure,
    Z.Failure == A.Failure,
    A.Failure == B.Failure,
    B.Failure == C.Failure,
    C.Failure == D.Failure,
    D.Failure == E.Failure,
    E.Failure == F.Failure,
    F.Failure == G.Failure,
    G.Failure == H.Failure {
        Publishers.CombineLatest(combineLatest(publisher1, publisher2, publisher3, publisher4, publisher5, publisher6, publisher7, publisher8, publisher9, publisher10, publisher11, publisher12, publisher13), publisher14).map { tuple, value in
            (tuple.0, tuple.1, tuple.2, tuple.3, tuple.4, tuple.5, tuple.6, tuple.7, tuple.8, tuple.9, tuple.10, tuple.11, tuple.12, tuple.13, value)
        }.eraseToAnyPublisher()
    }
    
    func combineLatest<P, Q, R, Y, X, Z, A, B, C, D, E, F, G, H, I>(
        _ publisher1: P,
        _ publisher2: Q,
        _ publisher3: R,
        _ publisher4: Y,
        _ publisher5: X,
        _ publisher6: Z,
        _ publisher7: A,
        _ publisher8: B,
        _ publisher9: C,
        _ publisher10: D,
        _ publisher11: E,
        _ publisher12: F,
        _ publisher13: G,
        _ publisher14: H,
        _ publisher15: I) ->
    AnyPublisher<(Self.Output, P.Output, Q.Output, R.Output, Y.Output, X.Output, Z.Output, A.Output, B.Output, C.Output, D.Output, E.Output, F.Output, G.Output, H.Output, I.Output), Self.Failure> where
P: Publisher,
Q: Publisher,
R: Publisher,
Y: Publisher,
X: Publisher,
Z: Publisher,
A: Publisher,
B: Publisher,
C: Publisher,
D: Publisher,
E: Publisher,
F: Publisher,
G: Publisher,
H: Publisher,
I: Publisher,
    Self.Failure == P.Failure,
    P.Failure == Q.Failure,
    Q.Failure == R.Failure,
    R.Failure == Y.Failure,
    Y.Failure == X.Failure,
    X.Failure == Z.Failure,
    Z.Failure == A.Failure,
    A.Failure == B.Failure,
    B.Failure == C.Failure,
    C.Failure == D.Failure,
    D.Failure == E.Failure,
    E.Failure == F.Failure,
    F.Failure == G.Failure,
    G.Failure == H.Failure,
    H.Failure == I.Failure {
        Publishers.CombineLatest(combineLatest(publisher1, publisher2, publisher3, publisher4, publisher5, publisher6, publisher7, publisher8, publisher9, publisher10, publisher11, publisher12, publisher13, publisher14), publisher15).map { tuple, value in
            (tuple.0, tuple.1, tuple.2, tuple.3, tuple.4, tuple.5, tuple.6, tuple.7, tuple.8, tuple.9, tuple.10, tuple.11, tuple.12, tuple.13, tuple.14, value)
        }.eraseToAnyPublisher()
    }
    
    func combineLatest<P, Q, R, Y, X, Z, A, B, C, D, E, F, G, H, I, J>(
        _ publisher1: P,
        _ publisher2: Q,
        _ publisher3: R,
        _ publisher4: Y,
        _ publisher5: X,
        _ publisher6: Z,
        _ publisher7: A,
        _ publisher8: B,
        _ publisher9: C,
        _ publisher10: D,
        _ publisher11: E,
        _ publisher12: F,
        _ publisher13: G,
        _ publisher14: H,
        _ publisher15: I,
        _ publisher16: J) ->
    AnyPublisher<(Self.Output, P.Output, Q.Output, R.Output, Y.Output, X.Output, Z.Output, A.Output, B.Output, C.Output, D.Output, E.Output, F.Output, G.Output, H.Output, I.Output, J.Output), Self.Failure> where
P: Publisher,
Q: Publisher,
R: Publisher,
Y: Publisher,
X: Publisher,
Z: Publisher,
A: Publisher,
B: Publisher,
C: Publisher,
D: Publisher,
E: Publisher,
F: Publisher,
G: Publisher,
H: Publisher,
I: Publisher,
J: Publisher,
    Self.Failure == P.Failure,
    P.Failure == Q.Failure,
    Q.Failure == R.Failure,
    R.Failure == Y.Failure,
    Y.Failure == X.Failure,
    X.Failure == Z.Failure,
    Z.Failure == A.Failure,
    A.Failure == B.Failure,
    B.Failure == C.Failure,
    C.Failure == D.Failure,
    D.Failure == E.Failure,
    E.Failure == F.Failure,
    F.Failure == G.Failure,
    G.Failure == H.Failure,
    H.Failure == I.Failure,
    I.Failure == J.Failure {
        Publishers.CombineLatest(combineLatest(publisher1, publisher2, publisher3, publisher4, publisher5, publisher6, publisher7, publisher8, publisher9, publisher10, publisher11, publisher12, publisher13, publisher14, publisher15), publisher16).map { tuple, value in
            (tuple.0, tuple.1, tuple.2, tuple.3, tuple.4, tuple.5, tuple.6, tuple.7, tuple.8, tuple.9, tuple.10, tuple.11, tuple.12, tuple.13, tuple.14, tuple.15, value)
        }.eraseToAnyPublisher()
    }
    
    func combineLatest<P, Q, R, Y, X, Z, A, B, C, D, E, F, G, H, I, J, K>(
        _ publisher1: P,
        _ publisher2: Q,
        _ publisher3: R,
        _ publisher4: Y,
        _ publisher5: X,
        _ publisher6: Z,
        _ publisher7: A,
        _ publisher8: B,
        _ publisher9: C,
        _ publisher10: D,
        _ publisher11: E,
        _ publisher12: F,
        _ publisher13: G,
        _ publisher14: H,
        _ publisher15: I,
        _ publisher16: J,
        _ publisher17: K) ->
    AnyPublisher<(Self.Output, P.Output, Q.Output, R.Output, Y.Output, X.Output, Z.Output, A.Output, B.Output, C.Output, D.Output, E.Output, F.Output, G.Output, H.Output, I.Output, J.Output, K.Output), Self.Failure> where
P: Publisher,
Q: Publisher,
R: Publisher,
Y: Publisher,
X: Publisher,
Z: Publisher,
A: Publisher,
B: Publisher,
C: Publisher,
D: Publisher,
E: Publisher,
F: Publisher,
G: Publisher,
H: Publisher,
I: Publisher,
J: Publisher,
K: Publisher,
    Self.Failure == P.Failure,
    P.Failure == Q.Failure,
    Q.Failure == R.Failure,
    R.Failure == Y.Failure,
    Y.Failure == X.Failure,
    X.Failure == Z.Failure,
    Z.Failure == A.Failure,
    A.Failure == B.Failure,
    B.Failure == C.Failure,
    C.Failure == D.Failure,
    D.Failure == E.Failure,
    E.Failure == F.Failure,
    F.Failure == G.Failure,
    G.Failure == H.Failure,
    H.Failure == I.Failure,
    I.Failure == J.Failure,
    J.Failure == K.Failure {
        Publishers.CombineLatest(combineLatest(publisher1, publisher2, publisher3, publisher4, publisher5, publisher6, publisher7, publisher8, publisher9, publisher10, publisher11, publisher12, publisher13, publisher14, publisher15, publisher16), publisher17).map { tuple, value in
            (tuple.0, tuple.1, tuple.2, tuple.3, tuple.4, tuple.5, tuple.6, tuple.7, tuple.8, tuple.9, tuple.10, tuple.11, tuple.12, tuple.13, tuple.14, tuple.15, tuple.16, value)
        }.eraseToAnyPublisher()
    }
    
    func combineLatest<P, Q, R, Y, X, Z, A, B, C, D, E, F, G, H, I, J, K, L>(
        _ publisher1: P,
        _ publisher2: Q,
        _ publisher3: R,
        _ publisher4: Y,
        _ publisher5: X,
        _ publisher6: Z,
        _ publisher7: A,
        _ publisher8: B,
        _ publisher9: C,
        _ publisher10: D,
        _ publisher11: E,
        _ publisher12: F,
        _ publisher13: G,
        _ publisher14: H,
        _ publisher15: I,
        _ publisher16: J,
        _ publisher17: K,
        _ publisher18: L) ->
    AnyPublisher<(Self.Output, P.Output, Q.Output, R.Output, Y.Output, X.Output, Z.Output, A.Output, B.Output, C.Output, D.Output, E.Output, F.Output, G.Output, H.Output, I.Output, J.Output, K.Output, L.Output), Self.Failure> where
P: Publisher,
Q: Publisher,
R: Publisher,
Y: Publisher,
X: Publisher,
Z: Publisher,
A: Publisher,
B: Publisher,
C: Publisher,
D: Publisher,
E: Publisher,
F: Publisher,
G: Publisher,
H: Publisher,
I: Publisher,
J: Publisher,
K: Publisher,
L: Publisher,
    Self.Failure == P.Failure,
    P.Failure == Q.Failure,
    Q.Failure == R.Failure,
    R.Failure == Y.Failure,
    Y.Failure == X.Failure,
    X.Failure == Z.Failure,
    Z.Failure == A.Failure,
    A.Failure == B.Failure,
    B.Failure == C.Failure,
    C.Failure == D.Failure,
    D.Failure == E.Failure,
    E.Failure == F.Failure,
    F.Failure == G.Failure,
    G.Failure == H.Failure,
    H.Failure == I.Failure,
    I.Failure == J.Failure,
    J.Failure == K.Failure,
    K.Failure == L.Failure {
        Publishers.CombineLatest(combineLatest(publisher1, publisher2, publisher3, publisher4, publisher5, publisher6, publisher7, publisher8, publisher9, publisher10, publisher11, publisher12, publisher13, publisher14, publisher15, publisher16, publisher17), publisher18).map { tuple, value in
            (tuple.0, tuple.1, tuple.2, tuple.3, tuple.4, tuple.5, tuple.6, tuple.7, tuple.8, tuple.9, tuple.10, tuple.11, tuple.12, tuple.13, tuple.14, tuple.15, tuple.16, tuple.17, value)
        }.eraseToAnyPublisher()
    }
    
    func combineLatest<P, Q, R, Y, X, Z, A, B, C, D, E, F, G, H, I, J, K, L, M>(
        _ publisher1: P,
        _ publisher2: Q,
        _ publisher3: R,
        _ publisher4: Y,
        _ publisher5: X,
        _ publisher6: Z,
        _ publisher7: A,
        _ publisher8: B,
        _ publisher9: C,
        _ publisher10: D,
        _ publisher11: E,
        _ publisher12: F,
        _ publisher13: G,
        _ publisher14: H,
        _ publisher15: I,
        _ publisher16: J,
        _ publisher17: K,
        _ publisher18: L,
        _ publisher19: M) ->
    AnyPublisher<(Self.Output, P.Output, Q.Output, R.Output, Y.Output, X.Output, Z.Output, A.Output, B.Output, C.Output, D.Output, E.Output, F.Output, G.Output, H.Output, I.Output, J.Output, K.Output, L.Output, M.Output), Self.Failure> where
P: Publisher,
Q: Publisher,
R: Publisher,
Y: Publisher,
X: Publisher,
Z: Publisher,
A: Publisher,
B: Publisher,
C: Publisher,
D: Publisher,
E: Publisher,
F: Publisher,
G: Publisher,
H: Publisher,
I: Publisher,
J: Publisher,
K: Publisher,
L: Publisher,
M: Publisher,
    Self.Failure == P.Failure,
    P.Failure == Q.Failure,
    Q.Failure == R.Failure,
    R.Failure == Y.Failure,
    Y.Failure == X.Failure,
    X.Failure == Z.Failure,
    Z.Failure == A.Failure,
    A.Failure == B.Failure,
    B.Failure == C.Failure,
    C.Failure == D.Failure,
    D.Failure == E.Failure,
    E.Failure == F.Failure,
    F.Failure == G.Failure,
    G.Failure == H.Failure,
    H.Failure == I.Failure,
    I.Failure == J.Failure,
    J.Failure == K.Failure,
    K.Failure == L.Failure,
    L.Failure == M.Failure {
        Publishers.CombineLatest(combineLatest(publisher1, publisher2, publisher3, publisher4, publisher5, publisher6, publisher7, publisher8, publisher9, publisher10, publisher11, publisher12, publisher13, publisher14, publisher15, publisher16, publisher17, publisher18), publisher19).map { tuple, value in
            (tuple.0, tuple.1, tuple.2, tuple.3, tuple.4, tuple.5, tuple.6, tuple.7, tuple.8, tuple.9, tuple.10, tuple.11, tuple.12, tuple.13, tuple.14, tuple.15, tuple.16, tuple.17, tuple.18, value)
        }.eraseToAnyPublisher()
    }
    
    func combineLatest<P, Q, R, Y, X, Z, A, B, C, D, E, F, G, H, I, J, K, L, M, N>(
        _ publisher1: P,
        _ publisher2: Q,
        _ publisher3: R,
        _ publisher4: Y,
        _ publisher5: X,
        _ publisher6: Z,
        _ publisher7: A,
        _ publisher8: B,
        _ publisher9: C,
        _ publisher10: D,
        _ publisher11: E,
        _ publisher12: F,
        _ publisher13: G,
        _ publisher14: H,
        _ publisher15: I,
        _ publisher16: J,
        _ publisher17: K,
        _ publisher18: L,
        _ publisher19: M,
        _ publisher20: N) ->
    AnyPublisher<(Self.Output, P.Output, Q.Output, R.Output, Y.Output, X.Output, Z.Output, A.Output, B.Output, C.Output, D.Output, E.Output, F.Output, G.Output, H.Output, I.Output, J.Output, K.Output, L.Output, M.Output, N.Output), Self.Failure> where
P: Publisher,
Q: Publisher,
R: Publisher,
Y: Publisher,
X: Publisher,
Z: Publisher,
A: Publisher,
B: Publisher,
C: Publisher,
D: Publisher,
E: Publisher,
F: Publisher,
G: Publisher,
H: Publisher,
I: Publisher,
J: Publisher,
K: Publisher,
L: Publisher,
M: Publisher,
N: Publisher,
    Self.Failure == P.Failure,
    P.Failure == Q.Failure,
    Q.Failure == R.Failure,
    R.Failure == Y.Failure,
    Y.Failure == X.Failure,
    X.Failure == Z.Failure,
    Z.Failure == A.Failure,
    A.Failure == B.Failure,
    B.Failure == C.Failure,
    C.Failure == D.Failure,
    D.Failure == E.Failure,
    E.Failure == F.Failure,
    F.Failure == G.Failure,
    G.Failure == H.Failure,
    H.Failure == I.Failure,
    I.Failure == J.Failure,
    J.Failure == K.Failure,
    K.Failure == L.Failure,
    L.Failure == M.Failure,
    M.Failure == N.Failure {
        Publishers.CombineLatest(combineLatest(publisher1, publisher2, publisher3, publisher4, publisher5, publisher6, publisher7, publisher8, publisher9, publisher10, publisher11, publisher12, publisher13, publisher14, publisher15, publisher16, publisher17, publisher18, publisher19), publisher20).map { tuple, value in
            (tuple.0, tuple.1, tuple.2, tuple.3, tuple.4, tuple.5, tuple.6, tuple.7, tuple.8, tuple.9, tuple.10, tuple.11, tuple.12, tuple.13, tuple.14, tuple.15, tuple.16, tuple.17, tuple.18, tuple.19, value)
        }.eraseToAnyPublisher()
    }
    
    func combineLatest<P, Q, R, Y, X, Z, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O>(
        _ publisher1: P,
        _ publisher2: Q,
        _ publisher3: R,
        _ publisher4: Y,
        _ publisher5: X,
        _ publisher6: Z,
        _ publisher7: A,
        _ publisher8: B,
        _ publisher9: C,
        _ publisher10: D,
        _ publisher11: E,
        _ publisher12: F,
        _ publisher13: G,
        _ publisher14: H,
        _ publisher15: I,
        _ publisher16: J,
        _ publisher17: K,
        _ publisher18: L,
        _ publisher19: M,
        _ publisher20: N,
        _ publisher21: O) ->
    AnyPublisher<(Self.Output, P.Output, Q.Output, R.Output, Y.Output, X.Output, Z.Output, A.Output, B.Output, C.Output, D.Output, E.Output, F.Output, G.Output, H.Output, I.Output, J.Output, K.Output, L.Output, M.Output, N.Output, O.Output), Self.Failure> where
P: Publisher,
Q: Publisher,
R: Publisher,
Y: Publisher,
X: Publisher,
Z: Publisher,
A: Publisher,
B: Publisher,
C: Publisher,
D: Publisher,
E: Publisher,
F: Publisher,
G: Publisher,
H: Publisher,
I: Publisher,
J: Publisher,
K: Publisher,
L: Publisher,
M: Publisher,
N: Publisher,
O: Publisher,
    Self.Failure == P.Failure,
    P.Failure == Q.Failure,
    Q.Failure == R.Failure,
    R.Failure == Y.Failure,
    Y.Failure == X.Failure,
    X.Failure == Z.Failure,
    Z.Failure == A.Failure,
    A.Failure == B.Failure,
    B.Failure == C.Failure,
    C.Failure == D.Failure,
    D.Failure == E.Failure,
    E.Failure == F.Failure,
    F.Failure == G.Failure,
    G.Failure == H.Failure,
    H.Failure == I.Failure,
    I.Failure == J.Failure,
    J.Failure == K.Failure,
    K.Failure == L.Failure,
    L.Failure == M.Failure,
    M.Failure == N.Failure,
    N.Failure == O.Failure {
        Publishers.CombineLatest(combineLatest(publisher1, publisher2, publisher3, publisher4, publisher5, publisher6, publisher7, publisher8, publisher9, publisher10, publisher11, publisher12, publisher13, publisher14, publisher15, publisher16, publisher17, publisher18, publisher19, publisher20), publisher21).map { tuple, value in
            (tuple.0, tuple.1, tuple.2, tuple.3, tuple.4, tuple.5, tuple.6, tuple.7, tuple.8, tuple.9, tuple.10, tuple.11, tuple.12, tuple.13, tuple.14, tuple.15, tuple.16, tuple.17, tuple.18, tuple.19, tuple.20, value)
        }.eraseToAnyPublisher()
    }
    
    func combineLatest<P, Q, R, Y, X, Z, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, S>(
        _ publisher1: P,
        _ publisher2: Q,
        _ publisher3: R,
        _ publisher4: Y,
        _ publisher5: X,
        _ publisher6: Z,
        _ publisher7: A,
        _ publisher8: B,
        _ publisher9: C,
        _ publisher10: D,
        _ publisher11: E,
        _ publisher12: F,
        _ publisher13: G,
        _ publisher14: H,
        _ publisher15: I,
        _ publisher16: J,
        _ publisher17: K,
        _ publisher18: L,
        _ publisher19: M,
        _ publisher20: N,
        _ publisher21: O,
        _ publisher22: S) ->
    AnyPublisher<(Self.Output, P.Output, Q.Output, R.Output, Y.Output, X.Output, Z.Output, A.Output, B.Output, C.Output, D.Output, E.Output, F.Output, G.Output, H.Output, I.Output, J.Output, K.Output, L.Output, M.Output, N.Output, O.Output, S.Output), Self.Failure> where
P: Publisher,
Q: Publisher,
R: Publisher,
Y: Publisher,
X: Publisher,
Z: Publisher,
A: Publisher,
B: Publisher,
C: Publisher,
D: Publisher,
E: Publisher,
F: Publisher,
G: Publisher,
H: Publisher,
I: Publisher,
J: Publisher,
K: Publisher,
L: Publisher,
M: Publisher,
N: Publisher,
O: Publisher,
S: Publisher,
    Self.Failure == P.Failure,
    P.Failure == Q.Failure,
    Q.Failure == R.Failure,
    R.Failure == Y.Failure,
    Y.Failure == X.Failure,
    X.Failure == Z.Failure,
    Z.Failure == A.Failure,
    A.Failure == B.Failure,
    B.Failure == C.Failure,
    C.Failure == D.Failure,
    D.Failure == E.Failure,
    E.Failure == F.Failure,
    F.Failure == G.Failure,
    G.Failure == H.Failure,
    H.Failure == I.Failure,
    I.Failure == J.Failure,
    J.Failure == K.Failure,
    K.Failure == L.Failure,
    L.Failure == M.Failure,
    M.Failure == N.Failure,
    N.Failure == O.Failure,
    O.Failure == S.Failure {
        Publishers.CombineLatest(combineLatest(publisher1, publisher2, publisher3, publisher4, publisher5, publisher6, publisher7, publisher8, publisher9, publisher10, publisher11, publisher12, publisher13, publisher14, publisher15, publisher16, publisher17, publisher18, publisher19, publisher20, publisher21), publisher22).map { tuple, value in
            (tuple.0, tuple.1, tuple.2, tuple.3, tuple.4, tuple.5, tuple.6, tuple.7, tuple.8, tuple.9, tuple.10, tuple.11, tuple.12, tuple.13, tuple.14, tuple.15, tuple.16, tuple.17, tuple.18, tuple.19, tuple.20, tuple.21, value)
        }.eraseToAnyPublisher()
    }
    
    func combineLatest<P, Q, R, Y, X, Z, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, S, T>(
        _ publisher1: P,
        _ publisher2: Q,
        _ publisher3: R,
        _ publisher4: Y,
        _ publisher5: X,
        _ publisher6: Z,
        _ publisher7: A,
        _ publisher8: B,
        _ publisher9: C,
        _ publisher10: D,
        _ publisher11: E,
        _ publisher12: F,
        _ publisher13: G,
        _ publisher14: H,
        _ publisher15: I,
        _ publisher16: J,
        _ publisher17: K,
        _ publisher18: L,
        _ publisher19: M,
        _ publisher20: N,
        _ publisher21: O,
        _ publisher22: S,
        _ publisher23: T) ->
    AnyPublisher<(Self.Output, P.Output, Q.Output, R.Output, Y.Output, X.Output, Z.Output, A.Output, B.Output, C.Output, D.Output, E.Output, F.Output, G.Output, H.Output, I.Output, J.Output, K.Output, L.Output, M.Output, N.Output, O.Output, S.Output, T.Output), Self.Failure> where
P: Publisher,
Q: Publisher,
R: Publisher,
Y: Publisher,
X: Publisher,
Z: Publisher,
A: Publisher,
B: Publisher,
C: Publisher,
D: Publisher,
E: Publisher,
F: Publisher,
G: Publisher,
H: Publisher,
I: Publisher,
J: Publisher,
K: Publisher,
L: Publisher,
M: Publisher,
N: Publisher,
O: Publisher,
S: Publisher,
T: Publisher,
    Self.Failure == P.Failure,
    P.Failure == Q.Failure,
    Q.Failure == R.Failure,
    R.Failure == Y.Failure,
    Y.Failure == X.Failure,
    X.Failure == Z.Failure,
    Z.Failure == A.Failure,
    A.Failure == B.Failure,
    B.Failure == C.Failure,
    C.Failure == D.Failure,
    D.Failure == E.Failure,
    E.Failure == F.Failure,
    F.Failure == G.Failure,
    G.Failure == H.Failure,
    H.Failure == I.Failure,
    I.Failure == J.Failure,
    J.Failure == K.Failure,
    K.Failure == L.Failure,
    L.Failure == M.Failure,
    M.Failure == N.Failure,
    N.Failure == O.Failure,
    O.Failure == S.Failure,
    S.Failure == T.Failure {
        Publishers.CombineLatest(combineLatest(publisher1, publisher2, publisher3, publisher4, publisher5, publisher6, publisher7, publisher8, publisher9, publisher10, publisher11, publisher12, publisher13, publisher14, publisher15, publisher16, publisher17, publisher18, publisher19, publisher20, publisher21, publisher22), publisher23).map { tuple, value in
            (tuple.0, tuple.1, tuple.2, tuple.3, tuple.4, tuple.5, tuple.6, tuple.7, tuple.8, tuple.9, tuple.10, tuple.11, tuple.12, tuple.13, tuple.14, tuple.15, tuple.16, tuple.17, tuple.18, tuple.19, tuple.20, tuple.21, tuple.22, value)
        }.eraseToAnyPublisher()
    }
    
    func combineLatest<P, Q, R, Y, X, Z, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, S, T, U>(
        _ publisher1: P,
        _ publisher2: Q,
        _ publisher3: R,
        _ publisher4: Y,
        _ publisher5: X,
        _ publisher6: Z,
        _ publisher7: A,
        _ publisher8: B,
        _ publisher9: C,
        _ publisher10: D,
        _ publisher11: E,
        _ publisher12: F,
        _ publisher13: G,
        _ publisher14: H,
        _ publisher15: I,
        _ publisher16: J,
        _ publisher17: K,
        _ publisher18: L,
        _ publisher19: M,
        _ publisher20: N,
        _ publisher21: O,
        _ publisher22: S,
        _ publisher23: T,
        _ publisher24: U) ->
    AnyPublisher<(Self.Output, P.Output, Q.Output, R.Output, Y.Output, X.Output, Z.Output, A.Output, B.Output, C.Output, D.Output, E.Output, F.Output, G.Output, H.Output, I.Output, J.Output, K.Output, L.Output, M.Output, N.Output, O.Output, S.Output, T.Output, U.Output), Self.Failure> where
P: Publisher,
Q: Publisher,
R: Publisher,
Y: Publisher,
X: Publisher,
Z: Publisher,
A: Publisher,
B: Publisher,
C: Publisher,
D: Publisher,
E: Publisher,
F: Publisher,
G: Publisher,
H: Publisher,
I: Publisher,
J: Publisher,
K: Publisher,
L: Publisher,
M: Publisher,
N: Publisher,
O: Publisher,
S: Publisher,
T: Publisher,
U: Publisher,
    Self.Failure == P.Failure,
    P.Failure == Q.Failure,
    Q.Failure == R.Failure,
    R.Failure == Y.Failure,
    Y.Failure == X.Failure,
    X.Failure == Z.Failure,
    Z.Failure == A.Failure,
    A.Failure == B.Failure,
    B.Failure == C.Failure,
    C.Failure == D.Failure,
    D.Failure == E.Failure,
    E.Failure == F.Failure,
    F.Failure == G.Failure,
    G.Failure == H.Failure,
    H.Failure == I.Failure,
    I.Failure == J.Failure,
    J.Failure == K.Failure,
    K.Failure == L.Failure,
    L.Failure == M.Failure,
    M.Failure == N.Failure,
    N.Failure == O.Failure,
    O.Failure == S.Failure,
    S.Failure == T.Failure,
    T.Failure == U.Failure {
        Publishers.CombineLatest(combineLatest(publisher1, publisher2, publisher3, publisher4, publisher5, publisher6, publisher7, publisher8, publisher9, publisher10, publisher11, publisher12, publisher13, publisher14, publisher15, publisher16, publisher17, publisher18, publisher19, publisher20, publisher21, publisher22, publisher23), publisher24).map { tuple, value in
            (tuple.0, tuple.1, tuple.2, tuple.3, tuple.4, tuple.5, tuple.6, tuple.7, tuple.8, tuple.9, tuple.10, tuple.11, tuple.12, tuple.13, tuple.14, tuple.15, tuple.16, tuple.17, tuple.18, tuple.19, tuple.20, tuple.21, tuple.22, tuple.23, value)
        }.eraseToAnyPublisher()
    }
    
    func combineLatest<P, Q, R, Y, X, Z, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, S, T, U, V>(
        _ publisher1: P,
        _ publisher2: Q,
        _ publisher3: R,
        _ publisher4: Y,
        _ publisher5: X,
        _ publisher6: Z,
        _ publisher7: A,
        _ publisher8: B,
        _ publisher9: C,
        _ publisher10: D,
        _ publisher11: E,
        _ publisher12: F,
        _ publisher13: G,
        _ publisher14: H,
        _ publisher15: I,
        _ publisher16: J,
        _ publisher17: K,
        _ publisher18: L,
        _ publisher19: M,
        _ publisher20: N,
        _ publisher21: O,
        _ publisher22: S,
        _ publisher23: T,
        _ publisher24: U,
        _ publisher25: V) ->
    AnyPublisher<(Self.Output, P.Output, Q.Output, R.Output, Y.Output, X.Output, Z.Output, A.Output, B.Output, C.Output, D.Output, E.Output, F.Output, G.Output, H.Output, I.Output, J.Output, K.Output, L.Output, M.Output, N.Output, O.Output, S.Output, T.Output, U.Output, V.Output), Self.Failure> where
P: Publisher,
Q: Publisher,
R: Publisher,
Y: Publisher,
X: Publisher,
Z: Publisher,
A: Publisher,
B: Publisher,
C: Publisher,
D: Publisher,
E: Publisher,
F: Publisher,
G: Publisher,
H: Publisher,
I: Publisher,
J: Publisher,
K: Publisher,
L: Publisher,
M: Publisher,
N: Publisher,
O: Publisher,
S: Publisher,
T: Publisher,
U: Publisher,
V: Publisher,
    Self.Failure == P.Failure,
    P.Failure == Q.Failure,
    Q.Failure == R.Failure,
    R.Failure == Y.Failure,
    Y.Failure == X.Failure,
    X.Failure == Z.Failure,
    Z.Failure == A.Failure,
    A.Failure == B.Failure,
    B.Failure == C.Failure,
    C.Failure == D.Failure,
    D.Failure == E.Failure,
    E.Failure == F.Failure,
    F.Failure == G.Failure,
    G.Failure == H.Failure,
    H.Failure == I.Failure,
    I.Failure == J.Failure,
    J.Failure == K.Failure,
    K.Failure == L.Failure,
    L.Failure == M.Failure,
    M.Failure == N.Failure,
    N.Failure == O.Failure,
    O.Failure == S.Failure,
    S.Failure == T.Failure,
    T.Failure == U.Failure,
    U.Failure == V.Failure {
        Publishers.CombineLatest(combineLatest(publisher1, publisher2, publisher3, publisher4, publisher5, publisher6, publisher7, publisher8, publisher9, publisher10, publisher11, publisher12, publisher13, publisher14, publisher15, publisher16, publisher17, publisher18, publisher19, publisher20, publisher21, publisher22, publisher23, publisher24), publisher25).map { tuple, value in
            (tuple.0, tuple.1, tuple.2, tuple.3, tuple.4, tuple.5, tuple.6, tuple.7, tuple.8, tuple.9, tuple.10, tuple.11, tuple.12, tuple.13, tuple.14, tuple.15, tuple.16, tuple.17, tuple.18, tuple.19, tuple.20, tuple.21, tuple.22, tuple.23, tuple.24, value)
        }.eraseToAnyPublisher()
    }
    
    func combineLatest<P, Q, R, Y, X, Z, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, S, T, U, V, W>(
        _ publisher1: P,
        _ publisher2: Q,
        _ publisher3: R,
        _ publisher4: Y,
        _ publisher5: X,
        _ publisher6: Z,
        _ publisher7: A,
        _ publisher8: B,
        _ publisher9: C,
        _ publisher10: D,
        _ publisher11: E,
        _ publisher12: F,
        _ publisher13: G,
        _ publisher14: H,
        _ publisher15: I,
        _ publisher16: J,
        _ publisher17: K,
        _ publisher18: L,
        _ publisher19: M,
        _ publisher20: N,
        _ publisher21: O,
        _ publisher22: S,
        _ publisher23: T,
        _ publisher24: U,
        _ publisher25: V,
        _ publisher26: W) ->
    AnyPublisher<(Self.Output, P.Output, Q.Output, R.Output, Y.Output, X.Output, Z.Output, A.Output, B.Output, C.Output, D.Output, E.Output, F.Output, G.Output, H.Output, I.Output, J.Output, K.Output, L.Output, M.Output, N.Output, O.Output, S.Output, T.Output, U.Output, V.Output, W.Output), Self.Failure> where
P: Publisher,
Q: Publisher,
R: Publisher,
Y: Publisher,
X: Publisher,
Z: Publisher,
A: Publisher,
B: Publisher,
C: Publisher,
D: Publisher,
E: Publisher,
F: Publisher,
G: Publisher,
H: Publisher,
I: Publisher,
J: Publisher,
K: Publisher,
L: Publisher,
M: Publisher,
N: Publisher,
O: Publisher,
S: Publisher,
T: Publisher,
U: Publisher,
V: Publisher,
W: Publisher,
    Self.Failure == P.Failure,
    P.Failure == Q.Failure,
    Q.Failure == R.Failure,
    R.Failure == Y.Failure,
    Y.Failure == X.Failure,
    X.Failure == Z.Failure,
    Z.Failure == A.Failure,
    A.Failure == B.Failure,
    B.Failure == C.Failure,
    C.Failure == D.Failure,
    D.Failure == E.Failure,
    E.Failure == F.Failure,
    F.Failure == G.Failure,
    G.Failure == H.Failure,
    H.Failure == I.Failure,
    I.Failure == J.Failure,
    J.Failure == K.Failure,
    K.Failure == L.Failure,
    L.Failure == M.Failure,
    M.Failure == N.Failure,
    N.Failure == O.Failure,
    O.Failure == S.Failure,
    S.Failure == T.Failure,
    T.Failure == U.Failure,
    U.Failure == V.Failure,
    V.Failure == W.Failure {
        Publishers.CombineLatest(combineLatest(publisher1, publisher2, publisher3, publisher4, publisher5, publisher6, publisher7, publisher8, publisher9, publisher10, publisher11, publisher12, publisher13, publisher14, publisher15, publisher16, publisher17, publisher18, publisher19, publisher20, publisher21, publisher22, publisher23, publisher24, publisher25), publisher26).map { tuple, value in
            (tuple.0, tuple.1, tuple.2, tuple.3, tuple.4, tuple.5, tuple.6, tuple.7, tuple.8, tuple.9, tuple.10, tuple.11, tuple.12, tuple.13, tuple.14, tuple.15, tuple.16, tuple.17, tuple.18, tuple.19, tuple.20, tuple.21, tuple.22, tuple.23, tuple.24, tuple.25, value)
        }.eraseToAnyPublisher()
    }
}
